import sys
import time


class BaseDatabaseCreation(object):
    """
    This class encapsulates all backend-specific differences that pertain to
    creation and destruction of the test database.
    """

    def __init__(self, connection):
        self.connection = connection

    @property
    def _nodb_connection(self):
        """
        Used to be defined here, now moved to DatabaseWrapper.
        """
        return self.connection._nodb_connection

    # def serialize_db_to_string(self):
    #     """
    #     Serializes all data in the database into a JSON string.
    #     Designed only for test runner usage; will not handle large
    #     amounts of data.
    #     """
    #     # Build list of all apps to serialize
    #     from django.db.migrations.loader import MigrationLoader
    #     loader = MigrationLoader(self.connection)
    #     app_list = []
    #     for app_config in apps.get_app_configs():
    #         if (
    #             app_config.models_module is not None and
    #             app_config.label in loader.migrated_apps and
    #             app_config.name not in settings.TEST_NON_SERIALIZED_APPS
    #         ):
    #             app_list.append((app_config, None))

    #     # Make a function to iteratively return every object
    #     def get_objects():
    #         for model in serializers.sort_dependencies(app_list):
    #             if (model._meta.can_migrate(self.connection) and
    #                     router.allow_migrate_model(
    #                         self.connection.alias, model)):
    #                 queryset = model._default_manager.using(
    #                     self.connection.alias).order_by(model._meta.pk.name)
    #                 for obj in queryset.iterator():
    #                     yield obj
    #     # Serialize to a string
    #     out = StringIO()
    #     serializers.serialize("json", get_objects(), indent=None, stream=out)
    #     return out.getvalue()

    # def deserialize_db_from_string(self, data):
    #     """
    #     Reloads the database with data from a string generated by
    #     the serialize_db_to_string method.
    #     """
    #     data = StringIO(data)
    #     for obj in serializers.deserialize("json", data,
    #                                        using=self.connection.alias):
    #         obj.save()

    def _get_database_display_str(self, verbosity, database_name):
        """
        Return display string for a database for use in various actions.
        """
        return "'%s'%s" % (
            self.connection.alias,
            (" ('%s')" % database_name) if verbosity >= 2 else '',
        )

    def sql_table_creation_suffix(self):
        """
        SQL to append to the end of the test table creation statements.
        """
        return ''
